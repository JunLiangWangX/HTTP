import{_ as t,c as e,o as a,U as i}from"./chunks/framework.gK-zsNwe.js";const d="/HTTP-Explanation/assets/mime-type-example.lUT055q7.png",u=JSON.parse('{"title":"MIME类型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/other/mime-type.md","filePath":"docs/other/mime-type.md","lastUpdated":1704556360000}'),o={name:"docs/other/mime-type.md"},s=i('<h1 id="mime类型" tabindex="-1">MIME类型 <a class="header-anchor" href="#mime类型" aria-label="Permalink to &quot;MIME类型&quot;">​</a></h1><p><strong>MIME类型，也被称为媒体类型，用于表示HTTP传输的内容的类型，以便客户端或服务端正确处理解析传输的数据</strong>。MIME类型通常在HTTP标头中的<code>Content-Type</code>字段中进行指定，例如下面的示例，如果要传输HTML文档，<code>Content-Type</code>头可能会设置为&quot;text/html&quot;。</p><p><img src="'+d+`" alt="mime-type-example"></p><h2 id="mime类型的结构" tabindex="-1">MIME类型的结构 <a class="header-anchor" href="#mime类型的结构" aria-label="Permalink to &quot;MIME类型的结构&quot;">​</a></h2><p>MIME 类型通常包含三个部分内容：类型（type）、子类型（subtype）、以及一个可选的参数（parameter=value），类型与子类型中间由斜杠 <code>/</code> 分割，而可选参数则使用<code>；</code>分割，中间没有空白字符。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type/subtype;parameter=value</span></span></code></pre></div><ul><li><strong>类型（type）</strong>：代表数据类型所属的大致分类，例如：视频数据的类型为<code>video</code> ，文本数据的类型为 <code>text</code>。</li><li><strong>子类型（subtype）</strong>：代表更确切的数据类型，以 <code>text</code> 类型为例，它的子类型包括：<code>plain</code>（纯文本）、<code>html</code>（HTML源代码）、<code>calender</code>（iCalendar/.ics文件）。</li><li><strong>可选的参数（parameter=value）</strong>：提供额外的信息，例如<code>text</code> 类型，可以添加可选的 <code>charset</code> 参数（charset=utf-8），以指定数据中的字符所使用的字符集。</li></ul><div class="danger custom-block"><p class="custom-block-title">MIME 类型对大小写不敏感，但是传统写法都是小写，参数值对大小写敏感。</p></div><h2 id="类型-type-的分类" tabindex="-1">类型(type)的分类 <a class="header-anchor" href="#类型-type-的分类" aria-label="Permalink to &quot;类型(type)的分类&quot;">​</a></h2><p><strong>类型分为了单一类型与多部分类型</strong>。</p><h3 id="单一类型" tabindex="-1">单一类型 <a class="header-anchor" href="#单一类型" aria-label="Permalink to &quot;单一类型&quot;">​</a></h3><p><strong>单一类型代表单一文件或媒介，比如一段文字、一个音乐文件、一个视频文件等。</strong></p><blockquote><p>单一类型示例</p></blockquote><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">text/html</span></span></code></pre></div><p>IANA 目前注册的单一类型如下：</p><table><thead><tr><th>类型(type)</th><th>描述</th></tr></thead><tbody><tr><td>audio</td><td>音频或音乐数据。常见MIME类型如 <code>audio/mpeg</code>、<code>audio/vorbis</code>。</td></tr><tr><td>font</td><td>字体/字型数据。常见MIME类型如 <code>font/woff</code>、<code>font/ttf</code> 和 <code>font/otf</code>。</td></tr><tr><td>image</td><td>图像或图形数据，包括位图和矢量静态图像，以及静态图像格式的动画版本，如 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/GIF" target="_blank" rel="noreferrer">GIF</a> 动画或 APNG。常见MIME类型如<code>image/jpeg</code>、<code>image/png</code> 和 <code>image/svg+xml</code>。</td></tr><tr><td>text</td><td>纯文本数据，包括任何人类可读内容、源代码或文本数据——如逗号分隔值（comma-separated value，即 CSV）格式的数据。示例包含：<code>text/plain</code>、<code>text/csv</code> 和 <code>text/html</code>。</td></tr><tr><td>video</td><td>视频数据或文件，例如 MP4 电影（<code>video/mp4</code>）。</td></tr><tr><td>example</td><td>在演示如何使用 MIME 类型的示例中用作占位符的保留类型。这一类型永远不应在示例代码或文档外使用。<code>example</code> 也可以作为子类型。例如，在一个处理音频有关的示例中，MIME 类型 <code>audio/example</code> 表示该类型是一个占位符，且在实际使用这段代码时，此处应当被替换成适当的类型。</td></tr><tr><td>application</td><td>不明确属于其他类型之一的任何二进制数据；要么是将以某种方式执行或解释的数据，要么是需要借助某个或某类特定应用程序来使用的二进制数据。通用二进制数据（或真实类型未知的二进制数据）是 <code>application/octet-stream</code>。其他常用的示例包含 <code>application/pdf</code>、<code>application/pkcs8</code> 和 <code>application/zip</code>。</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">对于那些没有明确子类型的文本文档，应使用 <code>text/plain</code>。类似的，没有明确子类型或子类型未知的二进制文件，应使用 <code>application/octet-stream</code>。</p></div><h3 id="多部分类型" tabindex="-1">多部分类型 <a class="header-anchor" href="#多部分类型" aria-label="Permalink to &quot;多部分类型&quot;">​</a></h3><p><strong>而多部分类型，可以代表由多个部件组合成的文档，其中每个部分都可能有各自的单一类型的 MIME 类型；此外，也可以代表多个文件被封装在单次事务中一同发送。</strong></p><blockquote><p>多部分类型示例</p></blockquote><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> multipart/form-data; boundary=aBoundaryString  // boundary表示多个部分实体的分割符</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--aBoundaryString  // 分隔符</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Disposition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> form-data; name=&quot;myFile&quot;; filename=&quot;img.jpg&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image/jpeg  // 每个部分都可能有各自的单一类型的 MIME 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--aBoundaryString // 分隔符</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Disposition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> form-data; name=&quot;myField&quot;; filename=&quot;test.mp4&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> video/mp4 // 每个部分都可能有各自的单一类型的 MIME 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--aBoundaryString // 分隔符</span></span></code></pre></div><p>IANA 目前注册的多部分类型如下：</p><table><thead><tr><th>类型(type)</th><th>描述</th></tr></thead><tbody><tr><td>multipart</td><td>由多个组件组成的数据，这些组件可能各自具有不同的 MIME 类型。例如，<code>multipart/form-data</code>（用于使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noreferrer"><code>FormData</code></a> API 生成的数据）和 <code>multipart/byteranges</code>（定义于 <a href="https://datatracker.ietf.org/doc/html/rfc7233#section-5.4.1" target="_blank" rel="noreferrer">RFC 7233, section 5.4.1</a>，当获取到的数据仅为部分内容时——如使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range" target="_blank" rel="noreferrer"><code>Range</code></a> 标头传输的内容——与返回的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP" target="_blank" rel="noreferrer">HTTP</a> 响应 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206" target="_blank" rel="noreferrer"><code>206</code></a> “Partial Content”组合使用）。</td></tr><tr><td>message</td><td>该类型通常用于表示电子邮件的消息体。例如，这可以用来表示将转发信息作为其数据一部分的电子邮件，或将超大信息分块发送，就像发送多条信息一样。例如，<code>message/rfc822</code>（用于转发或回复信息的引用）和 <code>message/partial</code>（允许将大段信息自动拆分成小段，由收件人重新组装）是两个常见的例子。</td></tr></tbody></table><h2 id="常见的mime类型" tabindex="-1">常见的MIME类型 <a class="header-anchor" href="#常见的mime类型" aria-label="Permalink to &quot;常见的MIME类型&quot;">​</a></h2><h3 id="文本类型-text" tabindex="-1">文本类型（text） <a class="header-anchor" href="#文本类型-text" aria-label="Permalink to &quot;文本类型（text）&quot;">​</a></h3><p>MIME 类型为 <code>text</code> 的文件包含文本数据。子类型指定数据所代表的具体文本文件格式。</p><table><thead><tr><th>子类型(subtext)</th><th>完整示例</th><th>描述</th></tr></thead><tbody><tr><td>plain</td><td>text/plain</td><td>这是文本文件的默认值。即使它其实意味着<em>未知的文本文件</em>，但浏览器认为是可以直接展示的。</td></tr><tr><td>css</td><td>text/css</td><td>在网页中要被解析为 CSS 的 CSS 文件<strong>必须</strong>指定 MIME 为 <code>text/css</code>。通常，如果服务器不识别 CSS 文件的 <code>.css</code> 后缀，则可能将它们以 MIME 为 <code>text/plain</code> 或 <code>application/octet-stream</code> 来发送给浏览器：在这种情况下，大多数浏览器不将其识别为 CSS 文件而直接忽略。</td></tr><tr><td>html</td><td>text/html</td><td>与css同理，所有的 HTML 内容都应该使用这种类型。</td></tr><tr><td>javascript</td><td>text/javascript</td><td>JavaScript 内容应始终使用 MIME 类型 <code>text/javascript</code> 提供，使用除 <code>text/javascript</code> 以外的任何 MIME 类型都可能导致脚本无法加载或运行。你可能会发现某些 JavaScript 内容在 MIME 类型中错误地使用了 <code>charset</code> 参数，以指定脚本内容的字符集。对于 JavaScript 内容来说，<code>charset</code> 参数无效，在大多数情况下会导致脚本加载失败。</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">遗留的 JavaScript MIME 类型</p><p>除了 <code>text/javascript</code> MIME 类型外，出于历史原因，<a href="https://mimesniff.spec.whatwg.org/" target="_blank" rel="noreferrer">MIME 嗅探标准</a>（定义浏览器应该如何解释媒体类型和如何处理无有效媒体类型的内容）允许使用匹配以下任意的 MIME 类型提供 JavaScript 代码：</p><ul><li><code>application/javascript</code> 已弃用</li><li><code>application/ecmascript</code> 已弃用</li><li><code>application/x-ecmascript</code> 非标准</li><li><code>application/x-javascript</code> 非标准</li><li><code>text/ecmascript</code> 已弃用</li><li><code>text/javascript1.0</code> 非标准</li><li><code>text/javascript1.1</code> 非标准</li><li><code>text/javascript1.2</code> 非标准</li><li><code>text/javascript1.3</code> 非标准</li><li><code>text/javascript1.4</code> 非标准</li><li><code>text/javascript1.5</code> 非标准</li><li><code>text/jscript</code> 非标准</li><li><code>text/livescript</code> 非标准</li><li><code>text/x-ecmascript</code> 非标准</li><li><code>text/x-javascript</code> 非标准</li></ul></div><h3 id="图片类型-image" tabindex="-1">图片类型（image） <a class="header-anchor" href="#图片类型-image" aria-label="Permalink to &quot;图片类型（image）&quot;">​</a></h3><p>MIME 类型为 <code>image</code> 的文件包含图像数据。子类型指定数据所代表的具体图像文件格式。</p><table><thead><tr><th>子类型(subtext)</th><th>完整示例</th><th>描述</th></tr></thead><tbody><tr><td>png</td><td>image/png</td><td>表明图片格式为PNG(Portable Network Graphics,便携式网络图形)，PNG是一种支持透明背景和更高的色彩深度的无损压缩图片格式，它避免了在图像保存过程的失真情况，因此在一些需要保持图像质量的场景中很受欢迎。</td></tr><tr><td>jpeg</td><td>image/jpeg</td><td>表明图片格式为JPEG(Joint Photographic Experts Group,联合图像专家组)，JPEG通常用于存储和传输数字图像，特别是照片。它采用有损压缩，可以在一定程度上减小图像文件的大小，但会引入一些信息损失。</td></tr><tr><td>gif</td><td>image/gif</td><td>表明图片格式为GIF(Graphics Interchange Format,图形互换格式)，GIF是一种位图图像格式，它支持简单的动画和透明背景，并且可以存储多帧图像，从而创建简单的动画效果。但是，GIF对颜色深度和图像质量的支持相对较低，因此在一些需要更高图像质量的情况下，其他格式如PNG或JPEG可能更为适用。</td></tr><tr><td>avif</td><td>image/avif</td><td>表明图片格式为AVIF(AV1 Image File Format,AV1图像文件格式)，AVIF是一种开放、无损和有损图像压缩格式，基于AV1视频编码标准，该格式具有更好的压缩效率，在保持图像质量的同时可以实现更小的文件大小。</td></tr><tr><td>svg+xml</td><td>image/svg+xml</td><td>表明图片格式为SVG(Scalable Vector Graphics,可缩放矢量图形)，SVG是一种基于XML（可扩展标记语言）的图像标准，用于描述二维矢量图形。与位图图像（如JPEG、PNG）不同，SVG图像是基于数学方程和几何形状的矢量图形，因此可以无损地缩放到不同的大小而不失真，因此它常用于Web开发中，特别适用于需要在不同分辨率和设备上保持图像质量的情况。</td></tr><tr><td>webp</td><td>image/webp</td><td>表明图片格式为webp(Web Picture,网页图片)，webp是一种支持透明度、动画和颜色配置的图像格式，由于其出色的压缩性能和良好的图像质量，WebP在网页设计和移动应用程序中得到了广泛的应用。</td></tr></tbody></table><h3 id="字体类型-font" tabindex="-1">字体类型（font） <a class="header-anchor" href="#字体类型-font" aria-label="Permalink to &quot;字体类型（font）&quot;">​</a></h3><p>MIME 类型为 <code>image</code> 的文件包含图像数据。子类型指定数据所代表的具体图像文件格式。</p><table><thead><tr><th>子类型(subtext)</th><th>完整示例</th><th>描述</th></tr></thead><tbody><tr><td>ttf</td><td>font/ttf</td><td>表明字体格式为TTF(TrueType 字体)，TrueType 是一种矢量字体技术，能够以可伸缩的方式呈现字符，这使得文本在不同大小和分辨率下都能保持清晰。TrueType 字体广泛应用于计算机操作系统和各种应用程序中，用于显示文本内容。</td></tr><tr><td>opentype</td><td>font/opentype</td><td>表明字体格式为OTF（OpenType，开放字体），OpenType 字体是 TrueType 字体的一个扩展，它结合了 TrueType 和 Adobe 的字体技术，并引入了更广泛的字符集、更多样化的字形、对颜色和多彩图案的支持等特性，使其成为一种功能强大且灵活的字体格式被广泛应用在数字设计、印刷和网络排版领域。</td></tr><tr><td>woff</td><td>font/woff</td><td>表明字体格式为WOFF（Web Open Font Format，Web开放字体格式），WOFF 格式设计的目标是在保持字体质量的同时减小文件大小，以提高Web性能。因此这种格式的字体文件通常具有较小的文件大小，能够提供更快的页面加载速度。它支持压缩和元数据的添加，使得字体在网络上的传输更加高效。</td></tr><tr><td>woff2</td><td>font/woff2</td><td>表明字体格式为WOFF2（Web Open Font Format 2.0，Web开放字体格式2.0），WOFF2 是 WOFF 格式的升级版本，WOFF2 与 WOFF 相比具有更高的压缩效率，能够显著减小字体文件的大小，这种格式在保持字体质量的同时，通过先进的压缩算法实现了更高的性能。由于其出色的压缩能力和广泛的浏览器支持，WOFF2 已经成为在Web开发中推荐的字体格式。</td></tr><tr><td>eot</td><td>font/eot</td><td>表明字体格式为EOT（Embedded OpenType，嵌入式开放字体），EOT 文件通常包含了字体的元数据和压缩的字体数据，以便在Web页面上有效地嵌入和传输。由于其他浏览器通常支持更通用的字体格式（如TTF、OTF、WOFF等），EOT 在现代Web开发中的使用相对较少，因为它主要是为了满足Internet Explorer的需求。</td></tr></tbody></table><h3 id="音频类型-audio" tabindex="-1">音频类型（audio） <a class="header-anchor" href="#音频类型-audio" aria-label="Permalink to &quot;音频类型（audio）&quot;">​</a></h3><h3 id="视频类型-video" tabindex="-1">视频类型（video） <a class="header-anchor" href="#视频类型-video" aria-label="Permalink to &quot;视频类型（video）&quot;">​</a></h3><h3 id="二进制数据类型-application" tabindex="-1">二进制数据类型（application） <a class="header-anchor" href="#二进制数据类型-application" aria-label="Permalink to &quot;二进制数据类型（application）&quot;">​</a></h3><h3 id="多部分数据类型-multipart" tabindex="-1">多部分数据类型（multipart） <a class="header-anchor" href="#多部分数据类型-multipart" aria-label="Permalink to &quot;多部分数据类型（multipart）&quot;">​</a></h3><h2 id="正确设置mime类型的重要性" tabindex="-1">正确设置MIME类型的重要性 <a class="header-anchor" href="#正确设置mime类型的重要性" aria-label="Permalink to &quot;正确设置MIME类型的重要性&quot;">​</a></h2><h2 id="mime嗅探" tabindex="-1">MIME嗅探 <a class="header-anchor" href="#mime嗅探" aria-label="Permalink to &quot;MIME嗅探&quot;">​</a></h2><h2 id="其他传送文件类型的方法" tabindex="-1">其他传送文件类型的方法 <a class="header-anchor" href="#其他传送文件类型的方法" aria-label="Permalink to &quot;其他传送文件类型的方法&quot;">​</a></h2>`,41),r=[s];function l(c,p,n,h,m,g){return a(),e("div",null,r)}const b=t(o,[["render",l]]);export{u as __pageData,b as default};
