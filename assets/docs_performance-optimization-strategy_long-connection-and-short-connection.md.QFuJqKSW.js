import{_ as s,o as i,c as a,R as t}from"./chunks/framework.jWGKUnDR.js";const e="/HTTP-Explanation/assets/link.LIoLsdYS.png",n="/HTTP-Explanation/assets/Spriting.usyIx4pg.png",p="/HTTP-Explanation/assets/net.z-9jomc4.png",u=JSON.parse('{"title":"长连接与短连接","description":"","frontmatter":{},"headers":[],"relativePath":"docs/performance-optimization-strategy/long-connection-and-short-connection.md","filePath":"docs/performance-optimization-strategy/long-connection-and-short-connection.md","lastUpdated":1701223983000}'),l={name:"docs/performance-optimization-strategy/long-connection-and-short-connection.md"},o=t(`<h1 id="长连接与短连接" tabindex="-1">长连接与短连接 <a class="header-anchor" href="#长连接与短连接" aria-label="Permalink to &quot;长连接与短连接&quot;">​</a></h1><h2 id="http-0-9" tabindex="-1">HTTP/0.9 <a class="header-anchor" href="#http-0-9" aria-label="Permalink to &quot;HTTP/0.9&quot;">​</a></h2><p>HTTP 的第一个文档版本是<a href="https://www.w3.org/Protocols/HTTP/AsImplemented.html" target="_blank" rel="noreferrer">HTTP/0.9</a>，于 1991 年提出。它是有史以来最简单的协议；有且只有一个名为 GET 的方法。如果客户端必须访问服务器上的某个网页，它会发出如下简单的请求</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.html</span></span></code></pre></div><p>服务器会收到请求，用 HTML 作为响应进行回复，一旦内容传输完毕，连接就会关闭，服务器的响应如下所示</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response body)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connection closed)</span></span></code></pre></div><p><strong>可以见得，当时的HTTP协议非常简单，并且通常它只需要发出一次请求就可获得所有的内容，当时的网络条件完全能满足此时HTTP协议的需求，因此人们并不在意发出的请求是否应该保持TCP网络连接，所以当时并未规定HTTP协议是否应该保持TCP网络连接。</strong></p><h2 id="http-1-0" tabindex="-1">HTTP/1.0 <a class="header-anchor" href="#http-1-0" aria-label="Permalink to &quot;HTTP/1.0&quot;">​</a></h2><p>1996 年，HTTP 的下一个版本即 HTTP/1.0 比原始版本有了很大改进。与仅为 HTML 响应设计的 HTTP/0.9 不同，HTTP/1.0 现在可以处理其他响应格式，即图像、视频文件、纯文本或任何其他内容类型。它添加了更多方法（即 POST 和 HEAD），更改了请求/响应格式，将 HTTP 标头添加到请求和响应中，添加了状态代码以识别响应，引入了字符集支持，多部分类型，授权、缓存、内容编码等。</p><blockquote><p>以下是示例 HTTP/1.0 请求的样子：</p></blockquote><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> / </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cs.fyi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> */*</span></span></code></pre></div><blockquote><p>以下是示例 HTTP/1.0 响应的样子：</p></blockquote><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.0 200 OK </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/plain</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 137582</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Expires</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Thu, 05 Dec 1997 16:00:00 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Last-Modified</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Wed, 5 August 1996 15:55:28 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apache 0.84</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response body)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connection closed)</span></span></code></pre></div><p><strong>相较于HTTP/0.9，可以看到HTTP/1.0可以处理并且响应除了HTML以外的其他类型的请求，如图像、视频、HTML、纯文本等。也是由于加入了很多其他类型的内容，如今不再能够发出一次请求就可获得所有的内容</strong>，通常获取完整内容需要发送几次甚至十几次请求才能获得，比如您访问的网页有 10 个图像、5 个样式表和 5 个 javascript 文件，当您需要获取网页完整且正确的内容时，需要发出总共 20 个请求。<strong>由于HTTP/1.0与HTTP/0.9一样，每次请求它就必须打开一个新的 TCP 连接，并且在满足该单个请求后，连接将关闭。对于任何下一个要求，它都必须建立在新的连接上</strong>。因此上述网页将会发起一系列 20 个独立的连接，并且服务器只能根据这些独立的连接一个接一个地处理提供响应。我们都知道<strong>每打开一个 TCP 连接都是相当耗费资源的操作，客户端和服务器端之间需要交换很多次消息，并且其中的网络延迟和带宽都会对这个过程造成巨幅的影响，从而导致整个一系列的请求变慢，对性能造成了影响。</strong> 为了解决这个问题 HTTP/1.0 的实现试图通过引入一个名为 <strong>Connection: keep-alive</strong> 的新标头来解决这个问题，但是，最终它仍然没有得到广泛支持，问题仍然存在。</p><h2 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h2><p>在 HTTP/1.0 仅推出 3 年后，下一个版本即 HTTP/1.1 于 1999 年发布，在 HTTP/1.0 中，每个连接只有一个请求，并且连接在请求完成后立即关闭，这导致了严重的性能损失和延迟问题。<strong>HTTP/1.1 引入了持久连接，即默认情况下连接不会关闭（Connection:keep-alive），而是保持打开状态，允许多个顺序请求</strong>。要关闭连接，请求头<code>Connection: close</code>必须可用。客户端通常在最后一个请求中发送此标头以安全关闭连接。<strong>当然持久连接不全然都是好处，它也有自身的缺点，在空闲状态，它还是会消耗服务器资源，而且在重负载时，还有可能遭受 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/DOS_attack" target="_blank" rel="noreferrer">DoS 攻击</a></strong>。</p><p>此外，HTTP/1.1还引入了HTTP pipelining(HTTP管道化)技术，默认情况下，HTTP请求是按顺序发出的。下一个请求只有在当前请求收到响应过后才会被发出。由于会受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。<strong>HTTP pipelining其实就是把多个HTTP请求放到一个TCP连接中一一发送，只不过在之前的协议中，下一个请求需要等到当前请求响应后发送，而HTTP pipelining则是在发送过程中不需要等待服务器对前一个请求的响应就可以发送下一个请求，这样可以避免连接延迟</strong>。想法确实很美好，但由于<code>线头阻塞</code>问题即使到了今天，大部分桌面浏览器仍然会选择默认关闭HTTP pipelining这一功能。</p><p><strong>至此，HTTP/1.1初步完成了对网络链接的优化：短连接、长连接、HTTP管道化。</strong></p><h3 id="短连接、长连接、http管道化" tabindex="-1">短连接、长连接、HTTP管道化 <a class="header-anchor" href="#短连接、长连接、http管道化" aria-label="Permalink to &quot;短连接、长连接、HTTP管道化&quot;">​</a></h3><p><img src="`+e+'" alt="Group 7838.png"></p><table><thead><tr><th>网络连接</th><th>标头</th><th>特点</th><th>缺点</th></tr></thead><tbody><tr><td>短连接</td><td>Connection: close</td><td>HTTP 最早期的和 HTTP/1.0 的值， 每次请求它就必须打开一个新的 TCP 连接，并且在满足该单个请 求后，连接将关闭。对于任何下一 个请求，它都必须建立在新的连接上。</td><td>每次 TCP 连接都是相当耗费资源的， 极大影响了请求的响应速度</td></tr><tr><td>长链接</td><td>Connection: keep-alive</td><td>HTTP/1.1请求的默认值，每次请求 它会保持TCP连接一定时间，后续 对同一服务器的请求它将使用该 连接完成，无需重新建立连接</td><td>在空闲状态，它还是会消耗服务器 资源，而且在重负载时，还有可能 遭受 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/DOS_attack" target="_blank" rel="noreferrer">DoS 攻击</a></td></tr><tr><td>管道化</td><td>无</td><td>同一条长连接上发出连续的请求， 而不用等待应答返回</td><td>线头阻塞</td></tr></tbody></table><h3 id="相关标头" tabindex="-1">相关标头 <a class="header-anchor" href="#相关标头" aria-label="Permalink to &quot;相关标头&quot;">​</a></h3><h4 id="connection-请求标头" tabindex="-1">Connection <code>请求标头</code> <a class="header-anchor" href="#connection-请求标头" aria-label="Permalink to &quot;Connection `请求标头`&quot;">​</a></h4><p><strong><code>Connection</code> 控制网络连接在当前请求完成后是否仍然保持连接状态。</strong> 如果发送的值是 <code>keep-alive</code>，它会保持连接去完成后续对同一服务器的请求；如果发送值是<code>close</code>，它每发起一个请求时都会创建一个新的网络连接，并在收到应答时立即关闭。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数</p><p><strong>取值</strong></p><ul><li><p><strong>close</strong></p><p>短连接：不保持网络连接，它每发起一个请求时都会创建一个新的网络连接，并在收到应答时立即关闭。 这是 HTTP/1.0 请求的默认值</p></li><li><p><strong>keep-alive</strong></p><p>长连接：保持网络连接，它会保持连接去完成后续对同一服务器的请求，这是 HTTP/1.1请求的默认值</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> close</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">警告</p><p>在 <a href="https://httpwg.org/specs/rfc9113.html#ConnectionSpecific" target="_blank" rel="noreferrer">HTTP/2</a> 和 <a href="https://httpwg.org/specs/rfc9114.html#header-formatting" target="_blank" rel="noreferrer">HTTP/3</a> 中，禁止使用特定于连接的标头字段，如 <code>Connection</code> 和 <code>Keep-Alive</code>。Chrome 和 Firefox 会在 HTTP/2 响应中忽略它们，但 Safari 遵循 HTTP/2 规范要求，不会加载包含这些字段的任何响应。</p></div><h4 id="keep-alive-请求标头" tabindex="-1">Keep-Alive <code>请求标头</code> <a class="header-anchor" href="#keep-alive-请求标头" aria-label="Permalink to &quot;Keep-Alive `请求标头`&quot;">​</a></h4><p>当请求头<code>Connection</code>为<code>keep-alive</code>时(请求保持连接去完成后续对同一服务器的请求)，可通过设置<code>Keep-Alive</code>请求头来指定空闲的连接需要保持的最小时长以及该连接可以发送的最大请求数量。</p><p><strong>参数</strong></p><ul><li><p><strong>timeout=&lt;number&gt;</strong></p><p>指定了一个空闲连接需要保持打开状态的最小时长（以秒为单位）。需要注意的是，如果没有在传输层设置 keep-alive TCP message 的话，大于 TCP 层面的超时设置会被忽略。</p></li><li><p><strong>max=&lt;number&gt;</strong></p><p>在连接关闭之前，在此连接可以发送的请求的最大值。在非管道连接中，除了 0 以外，这个值是被忽略的，因为需要在紧跟着的响应中发送新一次的请求。HTTP 管道连接则可以用它来限制管道的使用</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout=5, max=1000</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">警告</p><p>需要将 请求头 <code>Connection</code> 的值设置为 <code>&quot;keep-alive&quot;</code>这个标头才有意义。同时需要注意的是，在 HTTP/2 协议中， <code>Connection</code>和 <code>Keep-Alive</code>是被忽略的；在其中采用其他机制来进行连接管理。</p></div><h3 id="线头阻塞-head-of-line-blocking" tabindex="-1">线头阻塞（Head-of-line blocking） <a class="header-anchor" href="#线头阻塞-head-of-line-blocking" aria-label="Permalink to &quot;线头阻塞（Head-of-line blocking）&quot;">​</a></h3><p>HTTP pipelining将多个HTTP请求放到一个TCP连接中一一发送，而在发送过程中不需要等待服务器对前一个请求的响应；只不过，客户端还是要按照发送请求的顺序来接收响应。但不管怎么处理，服务器是要按照顺序处理请求的，如果前一个请求非常耗时，那么后续的请求都会受到影响，这就是所谓的线头阻塞（head-of-line blocking）。</p><p>当然，你可以在选择队伍时候就做好功课，去排一个你认为最快的队伍，或者甚至另起一个新的队伍（译者注：即新建一个TCP连接）。但不管怎么样，你总归得先选择一个队伍，而且一旦选定之后，就不能更换队伍。</p><p>但是，另起新队伍会导致资源耗费和性能损失（译者注：新建 TCP 连接的开销非常大）。这种另起新队伍的方式只在新队伍数量很少的情况下有作用，因此它并不具备可扩展性。（译者注：这段话意思是说，靠大量新建连接是不能有效解决延迟问题的，即HTTP pipelining并不能彻底解决head-of-line blocking问题。）所以针对此问题并没有完美的解决方案。</p><p>这就是为什么即使到了今天，大部分桌面浏览器仍然会选择默认关闭HTTP pipelining这一功能的原因。</p><h3 id="那些年-克服延迟之道" tabindex="-1">那些年，克服延迟之道 <a class="header-anchor" href="#那些年-克服延迟之道" aria-label="Permalink to &quot;那些年，克服延迟之道&quot;">​</a></h3><p>再困难的问题也有解决的方案，但这些方案却良莠不齐。</p><h4 id="spriting" tabindex="-1">Spriting <a class="header-anchor" href="#spriting" aria-label="Permalink to &quot;Spriting&quot;">​</a></h4><p><img src="'+n+`" alt="img"></p><p><strong>Spriting是一种将很多较小的图片合并成一张大图，再用JavaScript或者CSS将小图重新“切割”出来的技术。</strong></p><p><strong>网站可以利用这一技巧来达到提速的目的——在HTTP 1.1里，下载一张大图比下载100张小图快得多</strong>。</p><p>但是当某些页面只需要显示其中一两张小图时，这种缓存整张大图的方案就显得过于臃肿。同时，当缓存被清除的时候的时候，Spriting会导致所有小图片被同时删除，而不能选择保留其中最常用的几个。</p><h4 id="内联-inlining" tabindex="-1">内联（Inlining） <a class="header-anchor" href="#内联-inlining" aria-label="Permalink to &quot;内联（Inlining）&quot;">​</a></h4><p>Inlining是另外一种防止发送很多小图请求的技巧，它将图片的原始数据嵌入在CSS文件里面的URL里。而这种方案的优缺点跟Spriting很类似。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data:image/png;base64,&lt;data&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data:image/png;base64,&lt;data&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h4 id="拼接-concatenation" tabindex="-1">拼接（Concatenation） <a class="header-anchor" href="#拼接-concatenation" aria-label="Permalink to &quot;拼接（Concatenation）&quot;">​</a></h4><p>大型网站往往会包含大量的JavaScript文件。开发人员可以利用一些前端工具将这些文件合并为一个大的文件，从而让浏览器能只花费一个请求就将其下载完，而不是发无数请求去分别下载那些琐碎的JavaScript文件。但凡事往往有利有弊，如果某页面只需要其中一小部分代码，它也必须下载完整的那份；而文件中一个小小的改动也会造成大量数据的被重新下载。</p><p>这种方案也给开发者造成了很大的不便。</p><h4 id="分片-sharding" tabindex="-1">分片（Sharding） <a class="header-anchor" href="#分片-sharding" aria-label="Permalink to &quot;分片（Sharding）&quot;">​</a></h4><p>最后一个我要说的性能优化技术叫做“Sharding”。顾名思义，<strong>Sharding就是把你的服务分散在尽可能多的主机上</strong>。这种方案乍一听比较奇怪，但是实际上在这背后却蕴藏了它独辟蹊径的道理！</p><p>最初的HTTP 1.1规范提到一个客户端最多只能对同一主机建立两个TCP连接。因此，为了不和规范冲突，一些聪明的网站使用了新的主机名，这样的话，用户就能和网站建立更多的连接，从而降低载入时间。</p><p>后来，两个连接的限制被取消了，现在的客户端可以轻松地和每个主机建立6-8个连接。但由于连接的上限依然存在，所以网站还是会用这种技术来提升连接的数量。而随着资源个数的提升（上面章节的图例），网站会需要更多的连接来保证HTTP协议的效率，从而提升载入速度。在现今的网站上，使用50甚至100个连接来打开一个页面已经并不罕见。根据<a href="https://httparchive.org/" target="_blank" rel="noreferrer">httparchive.org</a>的最新记录显示，在Top 30万个URL中平均使用40（！）个TCP连接来显示页面，而且这个数字仍然在缓慢的增长中。</p><p>另外一个将图片或者其他资源分发到不同主机的理由是可以不使用cookies，毕竟现今cookies的大小已经非常可观了。无cookies的图片服务器往往意味着更小的HTTP请求以及更好的性能！</p><p>下面的图片展示了访问一个瑞典著名网站的时产生的数据包，请注意这些请求是如何被分发到不同主机的。</p><p><img src="`+p+'" alt="image.png"></p><h2 id="http-2" tabindex="-1">HTTP/2 <a class="header-anchor" href="#http-2" aria-label="Permalink to &quot;HTTP/2&quot;">​</a></h2><p>HTTP/2是专为降低内容传输延迟而设计，我们可以看下改善核心：</p><ul><li>降低协议对延迟的敏感</li><li>修复pipelining和head of line blocking的问题</li><li>防止主机需求更高的连接数量</li><li>保留所有现有的接口，内容，URI格式和结构</li><li>由IETF的HTTPbis工作组来制定</li></ul><blockquote><p>二进制协议</p></blockquote><p><strong>HTTP/2 倾向于通过使其成为二进制协议来解决 HTTP/1.x 中存在的延迟增加的问题</strong>。作为一个二进制协议，它更容易解析，但与 HTTP/1.x 不同的是，它不再被人眼读取。HTTP/2 的主要构建块是帧和流。</p><blockquote><p>帧与流</p></blockquote><p>HTTP 消息现在由一个或多个帧组成。有一个用于元数据的 HEADERS 帧和用于有效负载的 DATA 帧，并且存在几种其他类型的帧（HEADERS、DATA、RST_STREAM、SETTINGS、PRIORITY <a href="https://http2.github.io/http2-spec/#FrameTypes" target="_blank" rel="noreferrer">等</a>）。</p><p>每个 HTTP/2 请求和响应都被赋予一个唯一的流 ID，并且它被分成帧。帧不过是二进制数据。帧的集合称为流。每个帧都有一个流 ID，用于标识它所属的流，并且每个帧都有一个公共标头。此外，除了流 ID 是唯一的，值得一提的是，<strong>客户端发起的任何请求都使用奇数，而来自服务器的响应具有偶数流 ID</strong>。</p><blockquote><p>中断连接</p></blockquote><p>HTTP 1.1的有一个缺点是：<strong>当一个含有确切值的Content-Length的HTTP消息被送出之后，你就很难中断它了。当然，通常你可以断开整个TCP链接（但也不总是可以这样），但这样导致的代价就是需要通过三次握手来重新建立一个新的TCP连接</strong>。</p><p>在http2里面，我们可以通过发送RST_STREAM帧来实现这种需求，它是一种特殊的帧类型，用于中止某些流，即客户端可以发送此帧让服务器知道我不需要此流了。<strong>客户端可以使用 RST_STREAM 并停止接收特定流，同时连接不会被关闭其他流仍会正常运行</strong>。</p><blockquote><p>优先级</p></blockquote><p><strong>每个流都包含一个优先级（也就是“权重”），它被用来告诉对端哪个流更重要。当资源有限的时候，服务器会根据优先级来选择应该先发送哪些流。</strong></p><p><strong>借助于PRIORITY帧，客户端同样可以告知服务器当前的流依赖于其他哪个流。该功能让客户端能建立一个优先级“树”，所有“子流”会依赖于“父流”的传输完成情况。</strong></p><p>优先级和依赖关系可以在传输过程中被动态的改变。这样当用户滚动一个全是图片的页面的时候，浏览器就能够指定哪个图片拥有更高的优先级。或者是在你切换标签页的时候，浏览器可以提升新切换到页面所包含流的优先级。</p><blockquote><p>多路复用</p></blockquote><p>由于 HTTP/2 现在是二进制协议，并且正如我上面所说，<strong>它使用帧和流来进行请求和响应，因此一旦打开 TCP 连接，所有流都会通过同一连接异步发送，而无需打开任何其他连接。反过来，服务器以相同的异步方式响应，即响应没有顺序，客户端使用分配的流 ID 来识别特定数据包所属的流</strong>。流的<strong>多路复用</strong>解决了 HTTP/1.x 中存在的线头阻塞问题，即客户端不必等待正在花费时间的请求，其他请求仍将得到处理。</p><blockquote><p>头压缩</p></blockquote><p>HTTP是一种无状态的协议。简而言之，这意味着<strong>每个请求必须要携带服务器需要的所有细节，而不是让服务器保存住之前请求的元数据</strong>。因为http2并没有改变这个范式，所以它也以同样原理工作。这也保证了HTTP可重复性。当一个客户端从同一服务器请求了大量资源（例如页面的图片）的时候，所有这些请求看起来几乎都是一致的，而这些大量一致的东西则正好值得被压缩。</p><h2 id="本节参考" tabindex="-1">本节参考 <a class="header-anchor" href="#本节参考" aria-label="Permalink to &quot;本节参考&quot;">​</a></h2><ul><li><a href="https://cs.fyi/guide/http-in-depth" target="_blank" rel="noreferrer">https://cs.fyi/guide/http-in-depth</a></li><li><a href="https://http2-explained.haxx.se/zh/part2" target="_blank" rel="noreferrer">https://http2-explained.haxx.se/zh/part2</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Connection_management_in_HTTP_1.x" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Connection_management_in_HTTP_1.x</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive</a></li></ul><p>转载需要经过本人同意！</p>',85),h=[o];function r(c,d,k,g,T,P){return i(),a("div",null,h)}const b=s(l,[["render",r]]);export{u as __pageData,b as default};
