import{_ as t,c as e,o as s,ab as a}from"./chunks/framework.Cqbbt8M3.js";const i="/HTTP-Explanation/assets/content-negotiation-example.C1EBJe8w.png",n="/HTTP-Explanation/assets/proactive-responsive-cs-example.DnKbF8D8.png",p="/HTTP-Explanation/assets/proactive-cn-example.COLuS0Ac.png",l="/HTTP-Explanation/assets/respone-cn-example.CEFw5w7S.png",b=JSON.parse('{"title":"内容协商","description":"在HTTP协议中，内容协商是一种用于为同一URI 提供资源不同的表示形式（如语言、字符集、媒体类型等）的机制，该机制能够让用户获得最合适的资源表现内容。","frontmatter":{"title":"内容协商","head":[["meta",{"name":"description","content":"在HTTP协议中，内容协商是一种用于为同一URI 提供资源不同的表示形式（如语言、字符集、媒体类型等）的机制，该机制能够让用户获得最合适的资源表现内容。"}],["meta",{"name":"keywords","content":"HTTP 内容协商 主动内容协商 响应式内容协商 内容类型协商 响应式内容协商 Accept Content-Type Accept-Charset Accept-Language Content-Language Accept-Encoding Content-Encoding"}]]},"headers":[],"relativePath":"docs/content-negotiation/content-negotiation.md","filePath":"docs/content-negotiation/content-negotiation.md","lastUpdated":1704613192000}'),o={name:"docs/content-negotiation/content-negotiation.md"},r=a('<h1 id="内容协商" tabindex="-1">内容协商 <a class="header-anchor" href="#内容协商" aria-label="Permalink to &quot;内容协商&quot;">​</a></h1><p><strong>在HTTP协议中，内容协商是一种用于为同一URI 提供资源不同的表示形式（如语言、字符集、媒体类型等）的机制，该机制能够让用户获得最合适的资源表现内容</strong>。例如对于中文用户请求某一URI内容，服务器将返回该资源的中文形式；而英语用户请求同一资源时，则会返回该资源的英文形式。</p><p><img src="'+i+'" alt="content-negotiation-example"></p><h2 id="内容协商的分类" tabindex="-1">内容协商的分类 <a class="header-anchor" href="#内容协商的分类" aria-label="Permalink to &quot;内容协商的分类&quot;">​</a></h2><p><strong>HTTP内容协商分为了主动内容协商与响应式协商</strong>，主动协商由客户端发起，通过在请求中设置特定的请求标头来进行；响应式协商则有服务端发起，通过返回特定的响应状态码来进行。</p><p><img src="'+n+'" alt="proactive-responsive-cs-example"></p><h3 id="主动内容协商" tabindex="-1">主动内容协商 <a class="header-anchor" href="#主动内容协商" aria-label="Permalink to &quot;主动内容协商&quot;">​</a></h3><p>客户端在发送请求时会<strong>携带一系列内容协商的请求标头</strong>，这些标头描述了用户倾向的选择。服务器收到请求后会<strong>根据这些标头来选择最佳的资源表现形式返回给客户端</strong>，如果它不能提供一个合适的资源，它可能使用 <code>406</code>（Not Acceptable）、<code>415</code>（Unsupported Media Type）进行响应并为其支持的媒体类型设置标头。</p><p><img src="'+p+`" alt="proactive-cn-example"></p><p>目前HTTP内容协商机制有对内容类型的协商（使用标头<code>Accept</code>）、对内容字符编码的协商 （使用标头<code>Accept-Charset</code>）、对内容语言的协商（使用标头<code>Accept-Language</code>）以及对压缩算法的协商（使用标头<code>Accept-Encoding</code>）这四种协商方式。</p><h4 id="内容类型协商-accept-content-type" tabindex="-1">内容类型协商（Accept/Content-Type） <a class="header-anchor" href="#内容类型协商-accept-content-type" aria-label="Permalink to &quot;内容类型协商（Accept/Content-Type）&quot;">​</a></h4><p><strong>内容类型协商使用<code>Accept</code>请求头来告知（服务器）客户端期待的内容类型，这种内容类型用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a>来表示。服务器收到请求后会根据<code>Accept</code>提供的内容类型来匹配该资源合适的类型进行响应，并使用 <code>Content-Type</code>实体头通知客户端它的选择。如果该资源没有匹配的类型，将会返回一个<code>415</code>（Unsupported Media Type，不支持的媒体类型）的错误码。</strong></p><p>浏览器会为这个请求头<strong>自动设置</strong>合适的值，比如在获取一个 CSS 层叠样式表、图片、视频或脚本文件时会自动设置相应的MIME类型。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求使用Accpet告知（服务器）客户端期待的内容类型为HTML文档</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//响应使用Content-Type告知客户端它的选择</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span></code></pre></div><h4 id="字符编码协商-accept-charset-content-type" tabindex="-1">字符编码协商（Accept-Charset/Content-Type） <a class="header-anchor" href="#字符编码协商-accept-charset-content-type" aria-label="Permalink to &quot;字符编码协商（Accept-Charset/Content-Type）&quot;">​</a></h4><p><strong>字符编码协商使用<code>Accept-Charset</code> 请求头来告知（服务器）客户端可以处理的字符集类型。服务器收到请求后会根据<code>Accept-Charset</code>提供的字符编码来匹配该资源合适的编码版本进行响应，并使用 <code>Content-Type</code>实体头通知客户端它的选择。如果服务器不能提供任何可以匹配的字符集的版本，那么理论上来说应该返回一个<code>406</code>（Not Acceptable，不被接受）的错误码。但是为了更好的用户体验，这种方法很少采用，取而代之的是将其忽略。</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求使用Accept-Charset告知（服务器）客户端可以处理的字符集类型为utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Charset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">utf-8</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//响应使用Content-Type告知客户端它的选择</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title"><code>Accept-Charset</code>请求标头已被大部分浏览器移除</p><p>大多数浏览器已经不再广泛使用<code>Accept-Charset</code>头字段进行字符编码协商，因为现代网页通常使用 Unicode 字符集（如UTF-8）来处理多语言支持，它能够涵盖世界上大多数的字符。因此，浏览器通常会默认使用 UTF-8，而不再需要协商字符编码，<code>Accept-Charset</code>头也因此被认为是不必要的了。</p></div><h4 id="语言协商-accept-language-content-language" tabindex="-1">语言协商（Accept-Language/ Content-Language） <a class="header-anchor" href="#语言协商-accept-language-content-language" aria-label="Permalink to &quot;语言协商（Accept-Language/ Content-Language）&quot;">​</a></h4><p><strong>语言协商使用<code> Accept-Language</code> 请求头来告知（服务器）客户端能够理解的自然语言，以及优先选择的区域方言。服务器收到请求后会根据客户端的提议匹配该资源合适的语言版本进行响应，并使用 <code>Content-Language</code>实体头通知客户端它的选择。如果服务器不能提供任何可以匹配的语言的版本，那么理论上来说应该返回一个<code>406</code>（Not Acceptable，不被接受）的错误码。但是为了更好的用户体验，这种方法很少被采用，取而代之的是将其忽略。</strong></p><p>浏览器会基于其用户界面语言为这个请求头<strong>自动设置</strong>合适的值。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求使用Accept-Language告知（服务器）客户端能够理解的自然语言为中文简体</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zh-CN</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//响应使用Content-Language告知客户端它的选择</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zh-CN</span></span></code></pre></div><h4 id="压缩算法协商-accept-encoding-content-encoding" tabindex="-1">压缩算法协商（Accept-Encoding/Content-Encoding） <a class="header-anchor" href="#压缩算法协商-accept-encoding-content-encoding" aria-label="Permalink to &quot;压缩算法协商（Accept-Encoding/Content-Encoding）&quot;">​</a></h4><p><strong>压缩算法协商使用<code> Accept-Encoding</code> 请求头来告知（服务器）客户端能够理解的内容编码方式——通常是某种压缩算法。服务器收到请求后会选择一个客户端提议的压缩算法应用，使用并在实体头<code>Content-Encoding</code>中通知客户端该选择。只要没有被明确禁止使用压缩算法，则服务器不会返回<code>406</code>（Not Acceptable，不被接受）的错误码；否则，无法匹配则会返回该错误码。</strong></p><p>浏览器会为这个请求头<strong>自动设置</strong>合适的值。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求使用Accept-Encoding告知（服务器）客户端能够理解的内容编码方式gzip</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gzip</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//响应使用Content-Encoding告知客户端它的选择</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gzip</span></span></code></pre></div><p>虽然主动内容协商机制是最常用的协商方式，但它也存在如下几个缺点：</p><ul><li>服务器对客户端并非全知全能。即便是有了客户端提示扩展，也依然无法获取关于客户端的全部信息。与客户端进行选择的响应式内容协商机制不同，服务器端的选择总是显得有点武断。</li><li>客户端提供的信息相当冗长（HTTP/2 协议的标头压缩机制缓解了这个问题），并且存在隐私风险。</li><li>给定的资源需要返回不同的表示形式，共享缓存的效率会降低，并且服务器端的实现会越来越复杂。</li></ul><h3 id="响应式内容协商" tabindex="-1">响应式内容协商 <a class="header-anchor" href="#响应式内容协商" aria-label="Permalink to &quot;响应式内容协商&quot;">​</a></h3><p>从 HTTP 协议制定之初，该协议就准许另外一种协商机制——响应式协商。在这种协商机制中，当面临不明确的请求时，服务器会返回一个页面，其中包含了可供选择的资源的链接。资源呈现给用户，由用户做出选择。</p><p><img src="`+l+'" alt="respone-cn-example"></p><p>不幸的是，由于 HTTP 标准没有明确指定可选资源链接的页面的格式，以及相关实现的具体细节，因此该种协商方式的实现无一例外都是通过脚本技术来完成的，尤其是 JavaScript 重定向技术。也正是如此，该种协商方式没有获得人们的认可从而被逐渐遗弃。</p><h2 id="相关标头" tabindex="-1">相关标头 <a class="header-anchor" href="#相关标头" aria-label="Permalink to &quot;相关标头&quot;">​</a></h2><h3 id="accept-请求标头" tabindex="-1">Accept <code>请求标头</code> <a class="header-anchor" href="#accept-请求标头" aria-label="Permalink to &quot;Accept `请求标头`&quot;">​</a></h3><p><strong><code>Accept</code></strong> 请求头用来告知（服务器）客户端可以处理的内容类型，这种内容类型用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a>来表示。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>[ &lt;MIME-type&gt;/&lt;MIME-subtype&gt;;q=&lt;q&gt;, &lt;MIME-type&gt;/*,*/*,.......]</strong></p><p>指定一系列客户端期望的内容类型，这种内容类型用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a>来表示，使用逗号（,）分割。</p><ul><li><strong>&lt;MIME-type&gt;/&lt;MIME-subtype&gt;：</strong> 指定单一精确的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a>，例如<code>text/html</code>.</li><li><strong>&lt;MIME-type&gt;/*：</strong> 一类 MIME 类型，但是没有指明子类。<code>image/*</code> 可以用来指代 <code>image/png</code>、<code>image/svg</code>、<code>image/gif</code> 以及任何其他的图片类型。</li><li><strong>*/*：</strong> 任意类型的 MIME 类型。</li><li><strong>&lt;q&gt;</strong> <code>可选</code> ：小数0到1，代表期望的内容类型的优先顺序，又称为权重。</li></ul></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image/*</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span></code></pre></div><h3 id="content-type-实体标头" tabindex="-1">Content-Type <code>实体标头</code> <a class="header-anchor" href="#content-type-实体标头" aria-label="Permalink to &quot;Content-Type `实体标头`&quot;">​</a></h3><p>实体标头<code>Content-Type</code>描述了请求或响应中消息体的内容类型（这种内容类型用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a>来表示）以及字符编码方式。</p><p><strong>参数</strong></p><ul><li><p><strong>&lt;MIME-type&gt;</strong></p><p>指定一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a>，描述了请求或响应中消息体的内容类型。</p></li><li><p><strong>charset=&lt;charset&gt;</strong> <code>可选</code></p><p>指定一个字符编码，描述了请求或响应中消息体的字符编码方式。</p></li><li><p><strong>boundary=&lt;boundary&gt;</strong> <code>可选</code></p><p>对于多部分实体，boundary 是必需的，它指定了多个实体间的分隔符，以便将不同的部分（body parts）分隔开。</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> multipart/form-data; boundary=something</span></span></code></pre></div><h3 id="accept-charset-请求标头" tabindex="-1">Accept-Charset <code>请求标头</code> <a class="header-anchor" href="#accept-charset-请求标头" aria-label="Permalink to &quot;Accept-Charset `请求标头`&quot;">​</a></h3><p><strong><code>Accept-Charset</code></strong> 请求头用来告知（服务器）客户端可以处理的字符集类型。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>[ &lt;charset&gt;;q=&lt;q&gt;, &lt;charset&gt;,*,.......]</strong></p><p>指定一系列客户端可以处理的字符集类型，使用逗号（,）分割。</p><ul><li><strong>&lt;charset&gt;：</strong> 指定字符集类型，诸如 <code>utf-8</code> 或 <code>iso-8859-15</code> 等。</li><li><strong>*：</strong> 任意字符集内容</li><li><strong>&lt;q&gt;</strong> <code>可选</code> ：小数0到1，代表字符集类型的优先顺序，又称为权重</li></ul></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Charset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iso-8859-1</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Charset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utf-8, iso-8859-1;q=0.5</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Charset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utf-8, iso-8859-1;q=0.5, *;q=0.1</span></span></code></pre></div><h3 id="accept-language-请求标头" tabindex="-1">Accept-Language <code>请求标头</code> <a class="header-anchor" href="#accept-language-请求标头" aria-label="Permalink to &quot;Accept-Language `请求标头`&quot;">​</a></h3><p><strong><code>Accept-Language</code></strong> 请求头用来告知（服务器）客户端可以理解的自然语言类型，以及优先选择的区域方言。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>[ &lt;language&gt;;q=&lt;q&gt;, &lt;language&gt;,*,.......]</strong></p><p>指定一系列客户端可以理解的自然语言类型，使用逗号（,）分割。</p><ul><li><strong>&lt;language&gt;：</strong> 指定自然语言类型，诸如 <code>en-US</code> 或 <code>zh-CN</code> 等。</li><li><strong>*：</strong> 任意语言</li><li><strong>&lt;q&gt;</strong> <code>可选</code> ：小数0到1，代表自然语言类型的优先顺序，又称为权重</li></ul></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zh-CN</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> en-US,en;q=0.5</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span></code></pre></div><h3 id="content-language-实体标头" tabindex="-1">Content-Language <code>实体标头</code> <a class="header-anchor" href="#content-language-实体标头" aria-label="Permalink to &quot;Content-Language `实体标头`&quot;">​</a></h3><p>实体标头<code>Content-Language</code>描述了请求或响应中消息体中的内容采用的语言或语言组合。</p><p><strong>参数</strong></p><p>该实体标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>[ &lt;language&gt;, &lt;language&gt;,.......]</strong></p><p>指定一系列的自然语言类型，诸如 <code>en-US</code> 或 <code>zh-CN</code> 等，使用逗号（,）分割。</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zh-CN</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> en-US</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> de-DE, en-CA</span></span></code></pre></div><h3 id="accept-encoding-请求标头" tabindex="-1">Accept-Encoding <code>请求标头</code> <a class="header-anchor" href="#accept-encoding-请求标头" aria-label="Permalink to &quot;Accept-Encoding `请求标头`&quot;">​</a></h3><p><strong>请求头 Accept-Encoding 将客户端能够理解与支持的压缩算法告知给服务端</strong>。通过内容协商的方式，服务端会选择一个客户端提出的压缩算法，将响应主体内容进行压缩并使用 <code>Content-Encoding</code>响应头告知客户端自己选择的压缩算法。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>[ &lt;compress-algorithm&gt;;q=&lt;q&gt;, &lt;compress-algorithm&gt;,.......]</strong></p><p>指定一系列客户端支持的压缩算法（&lt;compress-algorithm&gt;），以及优先级（q=&lt;q&gt;，可选），压缩算法与优先级使用分号（;）分隔，压缩算法之间使用逗号(,)分隔。</p><p><strong>&lt;compress-algorithm&gt;：</strong></p><ul><li><strong>gzip</strong>：表示支持 <a href="http://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77" target="_blank" rel="noreferrer">Lempel-Ziv coding</a> (LZ77) 压缩算法，以及 32 位 CRC 校验的编码方式。</li><li><strong>compress</strong> ：表示支持 <a href="http://en.wikipedia.org/wiki/LZW" target="_blank" rel="noreferrer">Lempel-Ziv-Welch</a> (LZW) 压缩算法。</li><li><strong>deflate</strong> ：表示支持 <a href="http://en.wikipedia.org/wiki/Zlib" target="_blank" rel="noreferrer">zlib</a> 结构和 <a href="http://en.wikipedia.org/wiki/DEFLATE" target="_blank" rel="noreferrer"><em>deflate</em></a> 压缩算法。</li><li><strong>br</strong> ：表示支持 <a href="https://en.wikipedia.org/wiki/Brotli" target="_blank" rel="noreferrer">Brotli</a> 算法的编码方式。</li><li><strong>identity</strong> ：表示支持不压缩。</li><li><strong>*</strong>：匹配其他任意未在该请求头字段中列出的编码方式。假如该请求头字段不存在的话，这个值是默认值。它并不代表任意算法都支持，而仅仅表示算法之间无优先次序。</li></ul><p><strong>&lt;q&gt;</strong> <code>可选</code> ：小数0到1，代表算法的优先顺序，又称为权重。</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip, compress, br</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> br;q=1.0, gzip;q=0.8, *;q=0.1</span></span></code></pre></div><h3 id="content-encoding-实体标头" tabindex="-1">Content-Encoding <code>实体标头</code> <a class="header-anchor" href="#content-encoding-实体标头" aria-label="Permalink to &quot;Content-Encoding `实体标头`&quot;">​</a></h3><p><strong>实体标头<code>Content-Encoding</code> 列出了对当前请求或响应的消息体内容使用的压缩算法以及其编码顺序</strong>。</p><p><strong>参数</strong></p><p>该实体标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>[ &lt;compress-algorithm&gt;, &lt;compress-algorithm&gt;,.......]</strong></p><p>指定一系列的压缩算法（&lt;compress-algorithm&gt;），其前后顺序则表明了编码顺序。</p><p><strong>&lt;compress-algorithm&gt;：</strong></p><ul><li><strong>gzip</strong>：表示支持 <a href="http://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77" target="_blank" rel="noreferrer">Lempel-Ziv coding</a> (LZ77) 压缩算法，以及 32 位 CRC 校验的编码方式。</li><li><strong>compress</strong> ：表示支持 <a href="http://en.wikipedia.org/wiki/LZW" target="_blank" rel="noreferrer">Lempel-Ziv-Welch</a> (LZW) 压缩算法。</li><li><strong>deflate</strong> ：表示支持 <a href="http://en.wikipedia.org/wiki/Zlib" target="_blank" rel="noreferrer">zlib</a> 结构和 <a href="http://en.wikipedia.org/wiki/DEFLATE" target="_blank" rel="noreferrer"><em>deflate</em></a> 压缩算法。</li><li><strong>br</strong> ：表示支持 <a href="https://en.wikipedia.org/wiki/Brotli" target="_blank" rel="noreferrer">Brotli</a> 算法的编码方式。</li><li><strong>identity</strong> ：表示支持不压缩。</li></ul></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deflate</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> br</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deflate, gzip</span></span></code></pre></div><h2 id="本节参考" tabindex="-1">本节参考 <a class="header-anchor" href="#本节参考" aria-label="Permalink to &quot;本节参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Charset" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Charset</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Encoding" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Encoding</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Encoding" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Encoding</a></li></ul><p>转载需要经过本人同意，并标明出处！</p>',90),h=[r];function c(g,d,k,u,y,C){return s(),e("div",null,h)}const m=t(o,[["render",c]]);export{b as __pageData,m as default};
