import{_ as s,c as i,o as t,V as a}from"./chunks/framework.W8vbXn0r.js";const E=JSON.parse('{"title":"同源策略","description":"同源策略是一种内置于Web浏览器中的Web安全机制，它用于限制一个源的文档或者它加载的脚本如何能与另一个源的资源进行交互，它影响着网站相互访问的方式。 同源策略的主要目的是确保在Web浏览器中，来自不同源的网页或脚本不能随意访问和操纵其他源的资源和数据，确保网站只能在受信任的环境中访问和共享数据。","frontmatter":{"title":"同源策略","head":[["meta",{"name":"description","content":"同源策略是一种内置于Web浏览器中的Web安全机制，它用于限制一个源的文档或者它加载的脚本如何能与另一个源的资源进行交互，它影响着网站相互访问的方式。 同源策略的主要目的是确保在Web浏览器中，来自不同源的网页或脚本不能随意访问和操纵其他源的资源和数据，确保网站只能在受信任的环境中访问和共享数据。"}],["meta",{"name":"keywords","content":"HTTP HTTP安全 同源策略 SOP 跨源访问 代理 JSONP CORS CSRF 跨站请求伪造"}]]},"headers":[],"relativePath":"docs/security-strategy/same-origin-policy.md","filePath":"docs/security-strategy/same-origin-policy.md","lastUpdated":1704615968000}'),e={name:"docs/security-strategy/same-origin-policy.md"},n=a("",56),l=[n];function o(h,r,p,d,k,c){return t(),i("div",null,l)}const y=s(e,[["render",o]]);export{E as __pageData,y as default};
