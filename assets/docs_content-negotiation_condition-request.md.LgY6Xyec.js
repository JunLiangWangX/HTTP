import{_ as e,c as o,o as t,U as i}from"./chunks/framework.7gXuOlLR.js";const a="/HTTP-Explanation/assets/date-condition-request.tQmjNF23.png",d="/HTTP-Explanation/assets/version-condition-request.InDP_Mkq.png",c="/HTTP-Explanation/assets/httpresume3.0jbOo_RR.png",n="/HTTP-Explanation/assets/httpresume4.GiQMPjbs.png",b=JSON.parse('{"title":"条件请求","description":"条件请求是HTTP的一种内容协商机制，该机制通过在请求中包含特定的标头来告知服务器仅在某些条件得到满足时才响应。这类请求可以用来验证缓存的有效性，省去不必要的控制手段，帮助减少不必要的数据传输，提高效率，验证文件的完整性，确保资源的一致性和完整性。","frontmatter":{"title":"条件请求","head":[["meta",{"name":"description","content":"条件请求是HTTP的一种内容协商机制，该机制通过在请求中包含特定的标头来告知服务器仅在某些条件得到满足时才响应。这类请求可以用来验证缓存的有效性，省去不必要的控制手段，帮助减少不必要的数据传输，提高效率，验证文件的完整性，确保资源的一致性和完整性。"}],["meta",{"name":"keywords","content":"HTTP 条件请求 验证缓存的有效性 If-Unmodified-Since Last-Modified If-Modified-Since If-None-Match If-Match ETag If-Match If-Range"}]]},"headers":[],"relativePath":"docs/content-negotiation/condition-request.md","filePath":"docs/content-negotiation/condition-request.md","lastUpdated":1704624300000}'),s={name:"docs/content-negotiation/condition-request.md"},l=i('<h1 id="条件请求" tabindex="-1">条件请求 <a class="header-anchor" href="#条件请求" aria-label="Permalink to &quot;条件请求&quot;">​</a></h1><p>还记得范围请求以及缓存中所介绍的基于时间/版本的验证请求吗？这些能够携带某些条件发起的请求，被称为条件请求。<strong>条件请求是HTTP的一种内容协商机制，该机制通过在请求中包含特定的标头来告知服务器仅在某些条件得到满足时才响应</strong>。这类请求可以用来验证缓存的有效性，省去不必要的控制手段，帮助减少不必要的数据传输，提高效率，验证文件的完整性，确保资源的一致性和完整性。</p><h2 id="条件请求的分类" tabindex="-1">条件请求的分类 <a class="header-anchor" href="#条件请求的分类" aria-label="Permalink to &quot;条件请求的分类&quot;">​</a></h2><p><strong>条件请求正如缓存与范围请求中介绍的那样，分为了基于时间的条件请求与基于版本的条件请求</strong>。</p><h3 id="基于时间的条件请求" tabindex="-1">基于时间的条件请求 <a class="header-anchor" href="#基于时间的条件请求" aria-label="Permalink to &quot;基于时间的条件请求&quot;">​</a></h3><p>基于时间的条件请求依赖<code>Last-Modified</code>响应标头表明资源最后修改时间，依赖<code>If-Modified-Since</code>(缓存、普通请求使用)、<code>If-Unmodified-Since</code>(普通请求使用)或<code>If-Range</code>(范围请求使用)请求标头携带已请求过的资源的最后修改时间，以供服务器检查两资源修改时间是否一致，以此判断资源是否修改。<code>If-Modified-Since</code>是指当资源发生了修改则满足条件，提供资源；而<code>If-Unmodified-Since</code>与<code>If-Range</code>则是指当资源未发生修改则满足条件，提供资源。</p><p><img src="'+a+'" alt="date-condition-request"></p><p>基于时间的条件请求工作流程：</p><ul><li><p><strong>客户端请求资源</strong></p></li><li><p><strong>服务端响应资源：</strong> 服务端响应客户端请求资源，并携带<code>Last-Modified</code>响应标头表明所请求的资源最后修改时间。</p></li><li><p><strong>客户端发起条件请求：</strong> 客户端根据不同的请求使用相关标头携带之前请求过的资源的最后修改时间，对同一资源发起条件请求。</p><div class="tip custom-block"><p class="custom-block-title">不同的请求发起条件请求所使用的标头</p><ul><li><code>If-Modified-Since</code>:缓存、普通请求使用</li><li><code>If-Unmodified-Since</code>:普通请求使用</li><li><code>If-Range</code>:范围请求使用</li></ul></div></li><li><p><strong>服务端判断并响应资源：</strong> 根据请求携带的修改时间，检查服务器当前资源的修改时间是否一致，以此判断资源是否修改。最后根据不同的标头响应资源。</p><div class="tip custom-block"><p class="custom-block-title">不同标头响应资源的情况</p><ul><li><code>If-Modified-Since</code>:资源发生修改则响应资源返回<code>200</code>状态码，未发生修改则只响应状态码<code>304 Not Modified</code></li><li><code>If-Unmodified-Since</code>:资源未发生修改则响应资源返回<code>200</code>状态码，已发生修改则只响应状态码<code>412 Precondition Failed</code></li><li><code>If-Range</code>:资源未发生修改则响应部分资源并返回<code>206 Partial Content</code>状态码，资源发生修改则响应资源全部内容并返回<code>200</code>状态码</li></ul></div></li></ul><p>基于时间的条件请求虽然避免了重新传输相同的资源的问题，但它也存在诸多问题：</p><ul><li><strong>时钟同步问题：</strong> 基于时间的条件请求的前提条件是服务器和客户端的时钟是同步的。如果两者的时钟存在差异，可能会导致验证失败。这种情况下，服务器认为资源已经过期，但实际上客户端的时钟比服务器快或慢，导致了不必要的资源传输。</li><li><strong>时间精度问题：</strong> 时间戳通常只有秒级别的精度，这可能导致在某些情况下无法检测到资源的真正修改。如果两次修改之间的时间间隔很短，可能无法捕捉到变化。</li><li><strong>服务器时钟回退：</strong> 如果服务器的时钟回退（例如，由于时钟同步服务的干预），可能会导致客户端认为资源已经过期，尽管实际上它仍然是最新的。</li><li><strong>资源未被修改但最后修改时间已变：</strong> 有时资源的内容并没有实际修改，但由于某些原因，最后修改时间被更新了。这可能导致不必要的资源传输。</li></ul><p>为了解决这些问题，HTTP推出了基于版本的条件请求作为替代方案。</p><h3 id="基于版本的条件请求" tabindex="-1">基于版本的条件请求 <a class="header-anchor" href="#基于版本的条件请求" aria-label="Permalink to &quot;基于版本的条件请求&quot;">​</a></h3><p>基于版本的条件请求依赖<code>ETag</code>响应标头表明资源的版本，依赖<code>If-None-Match</code>(缓存、普通请求使用)、<code>If-Match</code>(普通请求使用)或<code>If-Range</code>(范围请求使用)请求标头携带已请求过的资源的版本，以供服务器检查两资源版本是否一致，以此判断资源是否修改。<code>If-None-Match</code>是指当资源发生了修改则满足条件，提供资源；而<code>If-Match</code>与<code>If-Range</code>则是指当资源未发生修改则满足条件，提供资源。</p><p><img src="'+d+'" alt="version-condition-request"></p><p>基于版本的条件请求工作流程：</p><ul><li><p><strong>客户端请求资源</strong></p></li><li><p><strong>服务端响应资源：</strong> 服务端响应客户端请求资源，并携带<code>ETag</code>响应标头表明所请求的资源的版本。</p></li><li><p><strong>客户端发起条件请求：</strong> 客户端根据不同的请求使用相关标头携带之前请求过的资源的版本，对同一资源发起条件请求。</p><div class="tip custom-block"><p class="custom-block-title">不同的请求发起条件请求所使用的标头</p><ul><li><code>If-None-Match</code>:缓存、普通请求使用</li><li><code>If-Match</code>:普通请求使用</li><li><code>If-Range</code>:范围请求使用</li></ul></div></li><li><p><strong>服务端判断并响应资源：</strong> 根据请求携带的资源版本，检查服务器当前资源的版本是否一致，以此判断资源是否修改。最后根据不同的标头响应资源。</p><div class="tip custom-block"><p class="custom-block-title">不同标头响应资源的情况</p><ul><li><code>If-None-Match</code>:资源发生修改则响应资源返回<code>200</code>状态码，未发生修改则只响应状态码<code>304 Not Modified</code></li><li><code>If-Match</code>:资源未发生修改则响应资源返回<code>200</code>状态码，已发生修改则只响应状态码<code>412 Precondition Failed</code></li><li><code>If-Range</code>:资源未发生修改则响应部分资源并返回<code>206 Partial Content</code>状态码，资源发生修改则响应资源全部内容并返回<code>200</code>状态码</li></ul></div></li></ul><p><strong>为什么范围请求要单独规定一个特点的标头<code>If-Range</code>来进行条件请求，而不复用 <code>If-Unmodified-Since</code>和 <code>If-Match</code>呢？</strong></p><p>确实对于范围请求来说，可以使用<code>If-Unmodified-Since</code>和 <code>If-Match</code>来进行条件请求，假如前置条件失败，服务器端会返回错误提示，然后客户端可以从头开始重新下载资源：</p><p><img src="'+c+'" alt="When the partially downloaded resource has been modified, the preconditions will fail and the resource will have to be downloaded again completely."></p><p>虽然这种方法行得通，但是它在文件发生变化的情况下增加了一次额外的请求/响应往返，这一点会影响性能。为此 HTTP 协议规定了一个特定的标头—— <code>If-Range</code>——来避免这种情况的发生：</p><p><img src="'+n+'" alt="The If-Range headers allows the server to directly send back the complete resource if it has been modified, no need to send a 412 error and wait for the client to re-initiate the download."></p><div class="danger custom-block"><p class="custom-block-title">强验证与弱验证</p><p><strong>强验证与弱验证主要用于基于版本的条件请求，是指服务器判断当前资源的版本与请求所指定的版本是否相匹配的验证模式</strong>。强验证模式下，只有当请求给定的版本与服务器当前版本完全一致时，才会判断两资源相同；而弱验证模式下，只要请求给定的版本与服务器当前版本接近，就会判断两资源相同。通过指<code>ETag</code>、<code>If-None-Match</code>、<code>If-Match</code>或<code>If-Range</code>标头的可选的参数<code> W/</code>即可指定为弱验证，而默认不指定则为强验证。</p></div><h2 id="相关标头" tabindex="-1">相关标头 <a class="header-anchor" href="#相关标头" aria-label="Permalink to &quot;相关标头&quot;">​</a></h2><p>标头<code>Last-Modified</code>、<code>If-Modified-Since</code>、<code>ETag</code>、<code>If-None-Match</code>、<code>If-Range</code>已在<a href="https://wangjunliang.com/HTTP-Explanation/docs/performance-optimization-strategy/http-cache.html" target="_blank" rel="noreferrer">HTTP缓存</a>、<a href="https://wangjunliang.com/HTTP-Explanation/docs/content-negotiation/range-request.html" target="_blank" rel="noreferrer">范围请求</a>章节详细介绍过，因此本节不再重复介绍。</p><h3 id="if-unmodified-since-请求标头" tabindex="-1">If-Unmodified-Since <code>请求标头</code> <a class="header-anchor" href="#if-unmodified-since-请求标头" aria-label="Permalink to &quot;If-Unmodified-Since `请求标头`&quot;">​</a></h3><p><strong>请求标头<code>If-Unmodified-Since</code>指定了一个绝对时间，其值为之前已请求过的内容的最后修改时间（通常由响应标头<code>Last-Modified</code>指定），携带该标头希望服务器通过检查当前资源的修改时间与该标头携带时间来判断资源是否发生修改。如果资源未发生修改则响应资源返回<code>200</code>状态码，已发生修改则只响应状态码<code>412 Precondition Failed</code></strong>。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>&lt;date&gt;</strong></p><p>一个绝对时间，其值为之前已请求过的内容的最后修改时间（通常由响应标头<code>Last-Modified</code>指定）</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">If-Unmodified-Since</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Wed, 21 Oct 2015 07:28:00 GMT</span></span></code></pre></div><h3 id="if-match-请求标头" tabindex="-1">If-Match <code>请求标头</code> <a class="header-anchor" href="#if-match-请求标头" aria-label="Permalink to &quot;If-Match `请求标头`&quot;">​</a></h3><p><strong>请求标头<code>If-Match</code>指定了一个版本号，其值为之前已请求过的内容的版本号（通常由响应标头<code>ETag</code>指定），携带该标头希望服务器通过检查当前资源的版本与该标头携带的版本来判断资源是否发生修改。如果资源未发生修改则响应资源返回<code>200</code>状态码，已发生修改则只响应状态码<code>412 Precondition Failed</code></strong>。</p><p><strong>参数</strong></p><p>该请求标头并无其他参数。</p><p><strong>取值</strong></p><ul><li><p><strong>W/</strong> <code>可选</code></p><p><code>&#39;W/&#39;</code>(大小写敏感) 表示使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Conditional_requests#weak_validation" target="_blank" rel="noreferrer">弱验证器</a>。弱验证器很容易生成，但不利于比较。强验证器是比较的理想选择，但很难有效地生成。相同资源的两个弱<code>Etag</code>值可能语义等同，但不是每个字节都相同。</p></li><li><p><strong>&quot;&lt;etag_value&gt;&quot;</strong></p><p>指定一个版本号，表示希望服务器检查资源是否与给定版本号匹配。</p></li><li><p><strong>*</strong> <code>可选</code></p><p>星号是一个特殊值，可以代表任意资源。它只用在进行资源上传时，通常是采用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT" target="_blank" rel="noreferrer"><code>PUT</code></a> 方法，来检测拥有相同识别 ID 的资源是否已经上传过了。</p></li></ul><p><strong>示例</strong></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">If-Match</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">If-Match</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> W/&quot;67ab43&quot;, &quot;54ed21&quot;, &quot;7892dd&quot;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">If-Match</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> *</span></span></code></pre></div><h2 id="本节参考" tabindex="-1">本节参考 <a class="header-anchor" href="#本节参考" aria-label="Permalink to &quot;本节参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Conditional_requests" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Conditional_requests</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match</a></li></ul><p>转载需要经过本人同意，并标明出处！</p>',44),r=[l];function p(h,g,f,u,m,k){return t(),o("div",null,r)}const T=e(s,[["render",p]]);export{b as __pageData,T as default};
